import subprocess
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--root", "-r", default="./data", type=str, help='Dataset Root')
parser.add_argument("--dataset", "-d", default="mnistOOD", type=str, help='Dataset Name')
parser.add_argument("--fraction", "-f", default=0.3, type=float, help='Subset Size')
parser.add_argument("--ood_ratio", "-o", default=0.5, type=float, help='OOD Ratio')
parser.add_argument("--kappa", "-k", default=0.5, type=float, help='kappa for warm restart')
parser.add_argument("--strategy", "-s", default='RETRIEVE', type=str, help='Data subset selection strategy')
parser.add_argument("--out_dir", default='./log/', type=str, help='Ouput logs directory')
args1 = parser.parse_args()

args = ['python3']
args.append('old_train_ssl.py')

if args1.dataset == 'cifar10':
    args.append('--dataset')
    args.append('cifar10')
    args.append('--zca')
    args.append('--wa')
    args.append('t.t.f')
    args.append('--num_labels')
    args.append('4000')
    args.append('--max_iter')
    args.append('500000')
elif args1.dataset == 'svhn':
    args.append('--dataset')
    args.append('svhn')
    args.append('--wa')
    args.append('t.t.f')
    args.append('--whiten')
    args.append('--num_labels')
    args.append('1000')
elif args1.dataset == 'cifarOOD':
    args.append('--dataset')
    args.append('cifarOOD')
    args.append('--zca')
    args.append('--wa')
    args.append('t.t.t')
    args.append('--ood_ratio')
    args.append(str(args1.ood_ratio))
    args.append('--ood')
    args.append('--num_labels')
    args.append('2400')
    args.append('--valid')
    args.append('--max_iter')
    args.append('500000')
    args.append('--lr')
    args.append('0.03')
elif args1.dataset == 'mnistOOD':
    args.append('--dataset')
    args.append('mnistOOD')
    args.append('--wa')
    args.append('f.f.f')
    args.append('--model')
    args.append('cnn')
    args.append('--ood_ratio')
    args.append(str(args1.ood_ratio))
    args.append('--ood')
    args.append('--num_labels')
    args.append('60')
    args.append('--valid')
    args.append('--max_iter')
    args.append('500000')
    args.append('--lr')
    args.append('0.003')
    parser.add_argument("--checkpoint", default=1000, type=int, help="checkpoint every N samples")
elif args1.dataset == 'cifarImbalance':
    args.append('--dataset')
    args.append('cifarImbalance')
    args.append('--zca')
    args.append('--wa')
    args.append('t.t.t')
    args.append('--ood_ratio')
    args.append(str(args1.ood_ratio))
    args.append('--classimb')
    args.append('--num_labels')
    args.append('2400')
    args.append('--valid')
    args.append('--max_iter')
    args.append('500000')
    args.append('--lr')
    args.append('0.03')

args.append('--fraction')
args.append(str(args1.fraction))
args.append('--dss_strategy')
args.append(args1.strategy)
args.append('--kappa')
args.append(str(args1.kappa))
args.append('--root')
args.append(args1.root)
args.append('--optimizer')
args.append('sgd')
args.append('--lr_decay')
args.append('cos')
args.append('-wd')
args.append('0.0005')
args.append('--warmup_iter')
args.append('0')
args.append('--consis')
args.append('ce')
args.append('--coef')
args.append('0.3')
args.append('--alg')
args.append('vat')
args.append('-em')
args.append('0.06')
args.append('--eps')
args.append('6')
args.append('--out_dir')
args.append(args1.out_dir)
print(args)
subprocess.run(args)



